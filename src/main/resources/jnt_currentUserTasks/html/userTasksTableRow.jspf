<c:forEach items="${moduleMap.currentList}"  var="task" varStatus="status" begin="${moduleMap.begin}" end="${moduleMap.end}">
    <tr class="${status.count % 2 == 0 ? 'odd' : 'even'}">
        <td headers="Title">
            <span class="icon-task icon-task-${task.properties['priority'].string}"></span>&nbsp;<span class="opentask" onclick="switchTaskDisplay('${task.identifier}')">${fn:escapeXml(task.displayableName)}</span>
            <c:if test="${not empty task.properties['targetNode'].node}">
                <c:set value="${jcr:findDisplayableNode(task.properties['targetNode'].node, renderContext)}" var="displayableNode"/>
                - <span><a href="<c:url value='${url.base}${displayableNode.path}.html'/>">${fn:escapeXml(task.properties["targetNode"].node.displayableName)}</a></span>
            </c:if>
            <c:set value="${jcr:findDisplayableNode(task, renderContext)}" var="displayableNode"/>
            <c:if test="${not jcr:isNodeType(displayableNode, 'jnt:user')}">
                - <span><a href="<c:url value='${url.base}${displayableNode.path}.html'/>">${displayableNode.displayableName}</a></span>
            </c:if>
            <div style="display:none;" class="taskdetail" id="taskdetail_${task.identifier}">
                <p class="task-info-p"><fmt:message key="label.createdBy"/>: ${task.properties['jcr:createdBy'].string}, <fmt:message key="label.createdOn"/> <fmt:formatDate value="${task.properties['jcr:created'].date.time}" dateStyle="long" type="both"/></p>
                <c:if test="${not empty task.properties['priority']}"><p class="task-priority-p"><fmt:message key="jnt_task.priority"/>: <span class="task-priority task-${task.properties['priority'].string}"><jcr:nodePropertyRenderer node="${task}" name="priority" renderer="resourceBundle"/></span></p></c:if>
                <c:if test="${not empty task.properties['description']}"><p class="task-text">${task.properties['description'].string}</p></c:if>
                <template:tokenizedForm>
                    <form id="tokenForm_${task.identifier}" name="tokenform_${task.identifier}" method="post" action="<c:url value='${url.base}'/>${task.path}">
                    </form>
                </template:tokenizedForm>
                <ul class="taskactionslist">
                    <c:set var="assignable" value="true" />
                    <c:if test="${not empty task.properties['candidates'] and task.properties['assigneeUserKey'].string ne user.name}">
                        <c:set var="assignable" value="false" />
                        <c:set var="candidates" value=""/>
                        <c:forEach items="${task.properties['candidates']}" var="candidate">
                            <c:set var="candidates" value=" ${candidate.string} ${candidates} "/>
                        </c:forEach>
                        <c:set var="userKey" value="u:${user.name}" />
                        <c:if test="${fn:contains(candidates, userKey)}">
                            <c:set var="assignable" value="true" />
                        </c:if>
                        <c:if test="${not assignable}">
                            <c:set var="groups" value="${user:getUserMembership(user)}" />
                            <c:forEach items="${groups}" var="x">
                                <c:if test="${fn:contains(candidates, x.key)}">
                                    <c:set var="assignable" value="true" />
                                </c:if>
                            </c:forEach>
                        </c:if>
                    </c:if>
                    <c:choose>
                        <c:when test="${task.properties.state.string == 'active' and task.properties['assigneeUserKey'].string ne user.name and assignable eq 'true'}">
                            <li><a class="taskaction taskaction-assign" href="javascript:sendNewAssignee('${task.identifier}','${task.path}','${user.name}')" title="assign to me"><fmt:message key="label.actions.assigneToMe"/></a></li>
                        </c:when>
                        <c:when test="${task.properties.state.string == 'active' and task.properties['assigneeUserKey'].string eq user.name}">
                            <li><a class="taskaction taskaction-refuse" href="javascript:sendNewAssignee('${task.identifier}','${task.path}','')" title="Refuse"><fmt:message key="label.actions.refuse"/></a></li>
                            <li><a class="taskaction taskaction-start" href="javascript:sendNewStatus('${task.identifier}','${task.path}','started')" title="start"><fmt:message key="label.actions.start"/></a></li>
                        </c:when>
                        <c:when test="${task.properties.state.string == 'started' and task.properties['assigneeUserKey'].string eq user.name}">
                            <li><a class="taskaction taskaction-refuse" href="javascript:sendNewAssignee('${task.identifier}','${task.path}','')" title="Refuse"><fmt:message key="label.actions.refuse"/></a></li>
                            <li><a class="taskaction taskaction-suspend" href="javascript:sendNewStatus('${task.identifier}','${task.path}','suspended')" title="suspend"><fmt:message key="label.actions.suspend"/></a></li>
                            <utility:setBundle basename="${task.properties['taskBundle'].string}" var="taskBundle"  />
                            <c:if test="${not empty task.properties['targetNode'].node}">
                                <c:set var="currentTaskNode" value="${jcr:findDisplayableNode(task.properties['targetNode'].node, renderContext)}" />
                                <li><a class="taskaction taskaction-preview" target="_blank" href="<c:url value="${url.basePreview}${currentTaskNode.path}.html"/>"><fmt:message key="label.preview"/></a></li>
                            </c:if>
                            <c:if test="${not empty task.properties['possibleOutcomes']}">
                                <c:forEach items="${task.properties['possibleOutcomes']}" var="outcome" varStatus="status">
                                    <fmt:message bundle="${taskBundle}" var="outcomeLabel" key="${fn:replace(task.properties['taskName'].string,' ','.')}.${fn:replace(outcome.string,' ','.')}"/>
                                    <c:if test="${fn:startsWith(outcomeLabel, '???')}"><fmt:message bundle="${taskBundle}" var="outcomeLabel" key="${fn:replace(task.properties['taskName'].string,' ','.')}.${fn:replace(fn:toLowerCase(outcome.string),' ','.')}"/></c:if>
                                    <li><a class="taskaction taskaction-start" href="javascript:sendNewStatus('${task.identifier}','${task.path}','finished','${outcome.string}')" title="${outcome.string}">${outcomeLabel}</a></li>
                                </c:forEach>
                            </c:if>
                            <c:if test="${empty task.properties['possibleOutcomes']}">
                                <c:set var="taskId" value="${task.identifier}"/>
                                <li><div class="taskaction-complete"><input class="completeTaskAction" taskPath="<c:url value='${url.base}${currentNode.path}'/>" type="checkbox" id="btnComplete-${taskId}" onchange="sendNewStatus('${taskId}','${task.path}','finished')"/>&nbsp;<label for="btnComplete-${taskId}"><fmt:message key="label.actions.completed"/></label></div></li>
                            </c:if>
                            <li>
                                <jcr:node var="taskData" path="${task.path}/taskData"/>
                                <c:if test="${not empty taskData}">
                                    <template:module path="${task.path}/taskData" view="taskData" />
                                </c:if>
                            </li>
                        </c:when>
                        <c:when test="${task.properties.state.string == 'finished'}">
                            <li><div class="taskaction-complete"><input name="Completed" type="checkbox" disabled="disabled" checked="checked" value="Completed" />&nbsp;<fmt:message key="label.actions.completed"/></div></li>
                        </c:when>
                        <c:when test="${task.properties.state.string == 'suspended' and task.properties['assigneeUserKey'].string eq user.name}">
                            <li><a class="taskaction taskaction-refuse" href="javascript:sendNewAssignee('${task.identifier}','${task.path}','')" title="Refuse"><fmt:message key="label.actions.refuse"/></a></li>
                            <li><a class="taskaction taskaction-continue" href="javascript:sendNewStatus('${task.identifier}','${task.path}','started')" title="start"><fmt:message key="label.actions.resume"/></a></li>
                        </c:when>
                        <c:when test="${task.properties.state.string == 'canceled'}">
                        </c:when>
                    </c:choose>
                    <c:if test="${not empty task.properties['dueDate']}"><li><a class="taskaction taskaction-iCalendar" href="<c:url value='${url.base}${task.path}.ics'/>" title="iCalendar"><fmt:message key="label.actions.icalendar"/></a></li></c:if>
                </ul>
            </div>
        </td>
        <c:if test="${dispAssignee}"><td headers="Assigned">${task.properties['assigneeUserKey'].string}</td></c:if>
        <c:if test="${dispCreator}"><td headers="CreatedBy">${task.properties['jcr:createdBy'].string}</td></c:if>
        <c:if test="${dispState}"><td class="center" headers="State">
            <span class="task-status task-status-${task.properties.state.string}"><fmt:message key="jnt_task.state.${task.properties.state.string}"/></span>

        </td></c:if>
        <c:choose>
            <c:when test="${dispDueDate}"><td headers="DueDate"><fmt:formatDate value="${task.properties['dueDate'].date.time}"
                                                                                dateStyle="medium" timeStyle="short" type="both"/></td></c:when>
            <c:when test="${dispLastModifiedDate}"><td headers="LastModifiedDate"><fmt:formatDate value="${task.properties['jcr:lastModified'].date.time}"
                                                                                                  dateStyle="medium" timeStyle="short" type="both"/></td></c:when>
        </c:choose>
    </tr>
</c:forEach>